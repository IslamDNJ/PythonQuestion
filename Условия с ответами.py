# Задача 1. Заполнить список случайными целыми числами из диапазона [-40; 40]. Длину списка ввести с клавиатуры. Вывести на экран все отрицательные нечетные числа:

import random

длина_списка = int(input("Введите длину списка: "))
мой_список = [random.randint(-40, 40) for _ in range(длина_списка)]

print("Сгенерированный список:", мой_список)

print("Отрицательные нечетные числа:")
for число in мой_список:
    if число < 0 and число % 2 != 0:
        print(число)


# Задача 2. Заполнить список случайными символами. Определить количество цифр в списке. Использовать символы от 0 (ноль) до z. Коды символов определить с помощью функции ord().

import random

длина_списка = int(input("Введите длину списка: "))
мой_список = [chr(random.randint(ord('0'), ord('z'))) for _ in range(длина_списка)]

print("Сгенерированный список:", мой_список)
количество_цифр = sum(1 for символ in мой_список if символ.isdigit())

print("Количество цифр в списке:", количество_цифр)


# Задача 3. С клавиатуры вводится строка, содержащая буквы, цифры и знаки препинания. Определить номер первого вхождения цифры 5. Если ее нет, вывести соответствующее сообщение.

введенная_строка = input("Введите строку: ")

номер_первого_вхождения = None

for индекс, символ in enumerate(введенная_строка):
    if символ.isdigit() and символ == '5':
        номер_первого_вхождения = индекс + 1  # индексы начинаются с 0, поэтому добавляем 1
        break

if номер_первого_вхождения is not None:
    print(f"Первое вхождение цифры 5 находится на позиции {номер_первого_вхождения}.")
else:
    print("Цифра 5 не найдена в строке.")


# Задача 4. С клавиатуры вводится последовательность действительных чисел, которая заканчивается нулем. Вычислить сумму всех чисел, которые меньше своего порядкового номера

сумма_чисел = 0
порядковый_номер = 1  # начинаем с 1, так как порядковый номер первого числа равен 1

while True:
    число = float(input("Введите число (для завершения введите 0): "))

    if число == 0:
        break

    if число < порядковый_номер:
        сумма_чисел += число

    порядковый_номер += 1

print(f"Сумма чисел, которые меньше своего порядкового номера: {сумма_чисел}")


# Задача 5. Сгенерировать и вывести на экран список, который содержит ровно n случайных символов. Значение n вводится с клавиатуры

import random

n = int(input("Введите значение n: "))

случайные_символы = [chr(random.randint(ord('a'), ord('z'))) for _ in range(n)]

print("Сгенерированный список случайных символов:", случайные_символы)


# Задача 6. Список заполняется случайными целыми числами из диапазона [-20; 600]. 
# Записать в новый список все числа, которые принадлежат промежутку [0; 30], и вывести его на экран.

import random

исходный_список = [random.randint(-20, 600) for _ in range(10)]  # Пример: используем 10 элементов

print("Исходный список:", исходный_список)

новый_список = [число for число in исходный_список if 0 <= число <= 30]

print("Новый список чисел из промежутка [0; 30]:", новый_список)


# Задача 7. С клавиатуры вводится строка. Определить, содержит ли она повторяющиеся символы, и вывести соответствующее сообщение

введенная_строка = input("Введите строку: ")

уникальные_символы = set()

есть_повторения = False

for символ in введенная_строка:
    if символ in уникальные_символы:
        есть_повторения = True
        break
    уникальные_символы.add(символ)

if есть_повторения:
    print("В строке есть повторяющиеся символы.")
else:
    print("В строке нет повторяющихся символов.")


# Задача 8. Заполнить список случайными целыми числами из диапазона [-50; 10]. Длину списка ввести с клавиатуры. Вывести на экран минимальный элемент и его номер.

import random

длина_списка = int(input("Введите длину списка: "))

мой_список = [random.randint(-50, 10) for _ in range(длина_списка)]

print("Сгенерированный список:", мой_список)

минимальный_элемент = min(мой_список)
номер_минимального_элемента = мой_список.index(минимальный_элемент) + 1  # индексы начинаются с 0

print(f"Минимальный элемент: {минимальный_элемент}")
print(f"Номер минимального элемента: {номер_минимального_элемента}")